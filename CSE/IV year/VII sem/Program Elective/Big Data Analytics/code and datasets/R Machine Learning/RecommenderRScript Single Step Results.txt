
# Load plyr package
library(plyr) # split-apply-combine paradigm for R

# Read dataset
train <-read.csv (file = "small.csv", header = TRUE)
> train
------------------------------------------------------------
   user.ID item.ID item's.rating
1        1     101           5.0
2        1     102           3.0
3        1     103           2.5
4        2     101           2.0
5        2     102           2.5
6        2     103           5.0
7        2     104           2.0
8        3     101           2.0
9        3     104           4.0
10       3     105           4.5
11       3     107           5.0
12       4     101           5.0
13       4     103           3.0
14       4     104           4.5
15       4     106           4.0
16       5     101           4.0
17       5     102           3.0
18       5     103           2.0
19       5     104           4.0
20       5     105           3.5
21       5     106           4.0
------------------------------------------------------------
names (train) <-c ("user", "item", "pref")

> train
------------------------------------------------------------
   user item pref
1     1  101  5.0
2     1  102  3.0
3     1  103  2.5
4     2  101  2.0
5     2  102  2.5
6     2  103  5.0
7     2  104  2.0
8     3  101  2.0
9     3  104  4.0
10    3  105  4.5
11    3  107  5.0
12    4  101  5.0
13    4  103  3.0
14    4  104  4.5
15    4  106  4.0
16    5  101  4.0
17    5  102  3.0
18    5  103  2.0
19    5  104  4.0
20    5  105  3.5
21    5  106  4.0
------------------------------------------------------------

# Calculated User Lists
usersUnique <-function () {
users <-unique (train $ user)
------------------------------------------------------------
> users
[1] 1 2 3 4 5
------------------------------------------------------------

users<-users [order (users)]
------------------------------------------------------------
> users [order (users)]
[1] 1 2 3 4 5
------------------------------------------------------------

}

# Calculation Method Product List
itemsUnique <-function () {
items <-unique (train $ item)
items [order (items)]
}

# Derive unique User Lists
users <-usersUnique ()
------------------------------------------------------------
> users
[1] 1 2 3 4 5
------------------------------------------------------------

# Product List
items <-itemsUnique ()
------------------------------------------------------------
> items
[1] 101 102 103 104 105 106 107
------------------------------------------------------------

# Establish Product List Index
index <-function (x) which (items %in% x)

# Split data frame, apply function and return results in  a data frame.
data<-ddply(train,.(user,item,pref),summarize,idx=index(item)) 
------------------------------------------------------------
> data
   user item pref idx
1     1  101  5.0   1
2     1  102  3.0   2
3     1  103  2.5   3
4     2  101  2.0   1
5     2  102  2.5   2
6     2  103  5.0   3
7     2  104  2.0   4
8     3  101  2.0   1
9     3  104  4.0   4
10    3  105  4.5   5
11    3  107  5.0   7
12    4  101  5.0   1
13    4  103  3.0   3
14    4  104  4.5   4
15    4  106  4.0   6
16    5  101  4.0   1
17    5  102  3.0   2
18    5  103  2.0   3
19    5  104  4.0   4
20    5  105  3.5   5
21    5  106  4.0   6
------------------------------------------------------------
# Co-occurrence matrix
co_occurrence <-function (data) {
n <-length (items)
------------------------------------------------------------
> n
[1] 7
------------------------------------------------------------

co <-matrix (rep (0, n * n), nrow = n) # initialize n*n matrix with 0
------------------------------------------------------------
> co
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
[1,]    0    0    0    0    0    0    0
[2,]    0    0    0    0    0    0    0
[3,]    0    0    0    0    0    0    0
[4,]    0    0    0    0    0    0    0
[5,]    0    0    0    0    0    0    0
[6,]    0    0    0    0    0    0    0
[7,]    0    0    0    0    0    0    0
------------------------------------------------------------

for (u in users) {
idx <-index (data $ item [which(data$user == u)]) # index of list of items for each user 
------------------------------------------------------------
>u=1
> idx
[1] 1 2 3   
------------------------------------------------------------

m <-merge (idx, idx) # generate every possible pair of items in m
------------------------------------------------------------
> m
  x y
1 1 1
2 2 1
3 3 1
4 1 2
5 2 2
6 3 2
7 1 3
8 2 3
9 3 3
------------------------------------------------------------

for (i in 1: nrow (m)) {
co [m$x[i], m$y[i]] = co[m$x[i], m$y[i]]+1 # increment each element of co pointed by each pair in m
------------------------------------------------------------
> co
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
[1,]    1    1    1    0    0    0    0
[2,]    1    1    1    0    0    0    0
[3,]    1    1    1    0    0    0    0
[4,]    0    0    0    0    0    0    0
[5,]    0    0    0    0    0    0    0
[6,]    0    0    0    0    0    0    0
[7,]    0    0    0    0    0    0    0
------------------------------------------------------------
}
}
return (co)
}

# Generate co-occurrence matrix
co <-co_occurrence (data)   # for u = 1 to 5
------------------------------------------------------------
> co
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
[1,]    5    3    4    4    2    2    1
[2,]    3    3    3    2    1    1    0
[3,]    4    3    4    3    1    2    0
[4,]    4    2    3    4    2    2    1
[5,]    2    1    1    2    2    1    1
[6,]    2    1    2    2    1    2    0
[7,]    1    0    0    1    1    0    1
------------------------------------------------------------
 

#Establish the user-scoring matrix based on user's rating information

# Recommendation algorithm
recommend <-function (udata = udata, co = coMatrix, num = 0) {
n <- length(items)

# All of pref
pref <- rep (0, n)  # A vector, pref, if length n is initialized to 0
------------------------------------------------------------
> pref
[1] 0 0 0 0 0 0 0
------------------------------------------------------------

pref[udata$idx] <-udata$pref   #Get pref of current user data

------------------------------------------------------------
> udata<-data[which(data$user==users[1]),]
> udata
  user item pref idx
1    1  101  5.0   1
2    1  102  3.0   2
3    1  103  2.5   3
> pref
[1] 5.0 3.0 2.5 0.0 0.0 0.0 0.0
------------------------------------------------------------

# User Rating Matrix
userx <- matrix(pref, nrow = n) #convert vector pref to matrix of size [n*1]
------------------------------------------------------------
> userx
     [,1]
[1,]  5.0
[2,]  3.0
[3,]  2.5
[4,]  0.0
[5,]  0.0
[6,]  0.0
[7,]  0.0
------------------------------------------------------------
# Scoring matrix co-occurrence matrix *
r <- co %*% userx    # co * current user's item pref
------------------------------------------------------------
> r
     [,1]
[1,] 44.0
[2,] 31.5
[3,] 39.0
[4,] 33.5
[5,] 15.5
[6,] 18.0
[7,]  5.0
------------------------------------------------------------
# Recommended Sort
r[udata$idx] <-0      # Reset idx position of current user in r
------------------------------------------------------------
> r
     [,1]
[1,]  0.0
[2,]  0.0
[3,]  0.0
[4,] 33.5
[5,] 15.5
[6,] 18.0
[7,]  5.0
------------------------------------------------------------
idx <-order(r, decreasing = TRUE)   # get the order of elements, in index, in r
------------------------------------------------------------
> idx
[1] 4 6 5 7 1 2 3
------------------------------------------------------------
topn <-data.frame (user = rep(udata$user[1], length(idx)), item
= items[idx], val = r[idx])   #order the items  along with r value for current user data  -- recommended sort
------------------------------------------------------------
> topn
  user item  val
1    1  104 33.5
2    1  106 18.0
3    1  105 15.5
4    1  107  5.0
5    1  101  0.0
6    1  102  0.0
7    1  103  0.0
------------------------------------------------------------
 
# Recommended (num, if > 0)results  
if (num> 0) {
topn <-head (topn, num)   # num recommendations
}
# Back to results
return (topn)		# all recommendations
}
 
# initializing dataframe for recommendations storage
recommendation<-data.frame()

# Generating recommendations for all of the users
for(i in 1:length(users)){
udata<-data[which(data$user==users[i]),]

recommendation<-rbind(recommendation,recommend(udata,co,0))  }

> recommendation
   user item  val
1     1  104 33.5
2     1  106 18.0
3     1  105 15.5
4     1  107  5.0
5     1  101  0.0
6     1  102  0.0
7     1  103  0.0

8     2  106 20.5
9     2  105 15.5
10    2  107  4.0
11    2  101  0.0
12    2  102  0.0
13    2  103  0.0
14    2  104  0.0

15    3  103 24.5
16    3  102 18.5
17    3  106 16.5
18    3  101  0.0
19    3  104  0.0
20    3  105  0.0
21    3  107  0.0

22    4  102 37.0
23    4  105 26.0
24    4  107  9.5
25    4  101  0.0
26    4  103  0.0
27    4  104  0.0
28    4  106  0.0

29    5  107 11.5
30    5  101  0.0
31    5  102  0.0
32    5  103  0.0
33    5  104  0.0
34    5  105  0.0
35    5  106  0.0
